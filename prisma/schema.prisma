generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String                    @id @default(cuid())
  email              String                    @unique
  username           String                    @unique
  password           String?
  name               String?
  avatar             String?
  bio                String?
  status             String                    @default("offline")
  lastSeen           DateTime                  @default(now())
  isOnline           Boolean                   @default(false)
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  emailVerified      DateTime?
  accounts           Account[]
  activeCalls        ActiveCall[]
  callRecords        CallRecord[]
  createdChannels    Channel[]                 @relation("ChannelCreator")
  channels           ChannelMember[]
  conversations      ConversationParticipant[]
  receivedMessages   Message[]                 @relation("ReceivedMessages")
  sentMessages       Message[]                 @relation("SentMessages")
  hiddenMessages     MessageHidden[]
  messageReactions   MessageReaction[]
  notifications      Notification[]
  sessions           Session[]
  blockedBy          UserBlock[]               @relation("Blocked")
  blockedUsers       UserBlock[]               @relation("BlockedBy")
  deviceProvisioning DeviceProvisioning[]
  devices            Device[]
  encryptedBackups   EncryptedBackup[]
}

model UserBlock {
  id        String   @id @default(cuid())
  blockerId String
  blockedId String
  createdAt DateTime @default(now())
  blocked   User     @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User     @relation("BlockedBy", fields: [blockerId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Message {
  id             String              @id @default(cuid())
  content        String
  type           String              @default("text")
  status         String              @default("unread")
  senderId       String
  receiverId     String?
  conversationId String?
  channelId      String?
  replyToId      String?
  editedAt       DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  channel        Channel?            @relation(fields: [channelId], references: [id], onDelete: Cascade)
  conversation   Conversation?       @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver       User?               @relation("ReceivedMessages", fields: [receiverId], references: [id])
  replyTo        Message?            @relation("MessageReplies", fields: [replyToId], references: [id])
  replies        Message[]           @relation("MessageReplies")
  sender         User                @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  attachments    MessageAttachment[]
  hiddenBy       MessageHidden[]
  reactions      MessageReaction[]

  @@index([conversationId])
  @@index([channelId])
  @@index([senderId])
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  fileName  String
  fileSize  Int
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model MessageHidden {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model Conversation {
  id                String                    @id @default(cuid())
  name              String?
  description       String?
  isGroup           Boolean                   @default(false)
  avatar            String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  activeCalls       ActiveCall[]
  callRecords       CallRecord[]
  participants      ConversationParticipant[]
  messages          Message[]
  encryptedMessages EncryptedMessage[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  role           String       @default("member")
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model Channel {
  id          String          @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean         @default(false)
  avatar      String?
  createdBy   String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  creator     User            @relation("ChannelCreator", fields: [createdBy], references: [id])
  members     ChannelMember[]
  messages    Message[]
}

model ChannelMember {
  id        String   @id @default(cuid())
  userId    String
  channelId String
  role      String   @default("member")
  joinedAt  DateTime @default(now())
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CallRecord {
  id             String        @id @default(cuid())
  conversationId String?
  callerId       String
  callType       String
  status         String
  duration       Int           @default(0)
  startedAt      DateTime      @default(now())
  endedAt        DateTime?
  participants   String[]
  caller         User          @relation(fields: [callerId], references: [id], onDelete: Cascade)
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([callerId])
}

model ActiveCall {
  id                 String       @id @default(cuid())
  callId             String       @unique
  conversationId     String
  callerId           String
  callType           String
  callerName         String
  callerAvatar       String?
  conversationName   String?
  isGroupCall        Boolean      @default(false)
  participantCount   Int          @default(0)
  status             String
  participants       String[]
  calleeParticipants String[]
  startTime          BigInt
  connectedTime      BigInt?
  traceMessageId     String?
  createdAt          DateTime     @default(now())
  expiresAt          DateTime
  caller             User         @relation(fields: [callerId], references: [id], onDelete: Cascade)
  conversation       Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([callId])
  @@index([conversationId])
  @@index([callerId])
  @@index([expiresAt])
}

model Device {
  id                  String                @id @default(cuid())
  userId              String
  registrationId      Int
  identityKey         String
  name                String?
  isPrimary           Boolean               @default(false)
  createdAt           DateTime              @default(now())
  lastSeen            DateTime?
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  uploadedAttachments EncryptedAttachment[]
  backups             EncryptedBackup[]
  receivedMessages    EncryptedMessage[]    @relation("ReceivedMessages")
  sentMessages        EncryptedMessage[]    @relation("SentMessages")
  groupReceivedKeys   GroupSenderKey[]      @relation("RecipientDevice")
  groupSenderKeys     GroupSenderKey[]      @relation("SenderDevice")
  oneTimePreKeys      OneTimePreKey[]
  signedPreKeys       SignedPreKey[]

  @@unique([userId, registrationId])
  @@map("devices")
}

model SignedPreKey {
  id        String   @id @default(cuid())
  deviceId  String
  keyId     Int
  publicKey String
  signature String
  createdAt DateTime @default(now())
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@unique([deviceId, keyId])
  @@map("signed_prekeys")
}

model OneTimePreKey {
  id        String    @id @default(cuid())
  deviceId  String
  keyId     Int
  publicKey String
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  device    Device    @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@unique([deviceId, keyId])
  @@map("one_time_prekeys")
}

model EncryptedMessage {
  id                String        @id @default(cuid())
  senderDeviceId    String
  recipientDeviceId String
  conversationId    String?
  ciphertext        String
  messageType       Int
  timestamp         DateTime      @default(now())
  deliveredAt       DateTime?
  conversation      Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  recipientDevice   Device        @relation("ReceivedMessages", fields: [recipientDeviceId], references: [id], onDelete: Cascade)
  senderDevice      Device        @relation("SentMessages", fields: [senderDeviceId], references: [id], onDelete: Cascade)

  @@index([recipientDeviceId, deliveredAt])
  @@map("encrypted_messages")
}

model GroupSenderKey {
  id                 String   @id @default(cuid())
  groupId            String
  senderDeviceId     String
  distributionId     String
  encryptedSenderKey String
  recipientDeviceId  String
  createdAt          DateTime @default(now())
  recipientDevice    Device   @relation("RecipientDevice", fields: [recipientDeviceId], references: [id], onDelete: Cascade)
  senderDevice       Device   @relation("SenderDevice", fields: [senderDeviceId], references: [id], onDelete: Cascade)

  @@unique([groupId, senderDeviceId, recipientDeviceId])
  @@map("group_sender_keys")
}

model EncryptedAttachment {
  id               String   @id @default(cuid())
  uploaderDeviceId String
  filename         String
  mimeType         String
  sizeBytes        BigInt
  digestSha256     String
  ciphertextUrl    String
  createdAt        DateTime @default(now())
  uploaderDevice   Device   @relation(fields: [uploaderDeviceId], references: [id], onDelete: Cascade)

  @@map("encrypted_attachments")
}

model DeviceProvisioning {
  id             String   @id @default(cuid())
  provisioningId String   @unique
  userId         String
  encryptedData  String?
  iv             String?
  approved       Boolean  @default(false)
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("device_provisioning")
}

model EncryptedBackup {
  id            String   @id @default(cuid())
  userId        String
  deviceId      String
  version       Int
  kdfSalt       String
  encryptedData String
  hmac          String
  createdAt     DateTime @default(now())
  device        Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("encrypted_backups")
}
