generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String    @unique
  password        String?
  name            String?
  avatar          String?
  bio             String?
  status          String    @default("offline")
  lastSeen        DateTime  @default(now())
  isOnline        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  emailVerified   DateTime?
  
  accounts        Account[]
  sessions        Session[]
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  conversations   ConversationParticipant[]
  channels        ChannelMember[]
  createdChannels Channel[] @relation("ChannelCreator")
  notifications   Notification[]
  messageReactions MessageReaction[]
  blockedUsers    UserBlock[] @relation("BlockedBy")
  blockedBy       UserBlock[] @relation("Blocked")
}

model UserBlock {
  id        String   @id @default(cuid())
  blockerId String
  blockedId String
  createdAt DateTime @default(now())

  blocker User @relation("BlockedBy", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Message {
  id             String   @id @default(cuid())
  content        String   @db.Text
  type           String   @default("text")
  status         String   @default("unread")
  senderId       String
  receiverId     String?
  conversationId String?
  channelId      String?
  replyToId      String?
  editedAt       DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  sender       User          @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User?         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  channel      Channel?      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  replyTo      Message?      @relation("MessageReplies", fields: [replyToId], references: [id])
  replies      Message[]     @relation("MessageReplies")
  reactions    MessageReaction[]
  attachments  MessageAttachment[]

  @@index([conversationId])
  @@index([channelId])
  @@index([senderId])
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  fileName  String
  fileSize  Int
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String    @id @default(cuid())
  name         String?
  description  String?
  isGroup      Boolean   @default(false)
  avatar       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  role           String       @default("member")
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime?
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, conversationId])
}

model Channel {
  id          String    @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean   @default(false)
  avatar      String?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  creator  User            @relation("ChannelCreator", fields: [createdBy], references: [id])
  messages Message[]
  members  ChannelMember[]
}

model ChannelMember {
  id        String   @id @default(cuid())
  userId    String
  channelId String
  role      String   @default("member")
  joinedAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
